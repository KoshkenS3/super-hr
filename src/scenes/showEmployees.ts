import { Scenes } from 'telegraf'
import { employeeListKeyboard } from '../keyboards/main'
import { format, addDays, parse } from 'date-fns'
import { ru } from 'date-fns/locale'
import { WizardContext } from '../types/context'
import { Employee } from 'src/entities/Employee.entity'

// –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ü–µ–Ω—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
export const showEmployeesScene = new Scenes.BaseScene<WizardContext>('showEmployees')

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–ø–∏—Å–∫–∞
showEmployeesScene.enter(async (ctx) => {
  const userId = ctx.from?.id.toString()
  if (!userId) return

  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [employees, total] = await ctx.employeeService.getEmployeesByUserId(userId)
    if (employees.length === 0) {
      await ctx.reply('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤')
      return await ctx.scene.leave()
    }

    // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü (–ø–æ 5 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ)
    const totalPages = Math.ceil(total / 5)
    const message = formatEmployeesList(employees)

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    await ctx.reply(message, employeeListKeyboard(0, totalPages))
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:', error)
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤')
    return await ctx.scene.leave()
  }
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
showEmployeesScene.action(/^page_(\d+)$/, async (ctx) => {
  const match = ctx.match[1]
  const page = parseInt(match)
  const userId = ctx.from?.id.toString()
  if (!userId) return

  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const [employees, total] = await ctx.employeeService.getEmployeesByUserId(userId, page * 5)
    const totalPages = Math.ceil(total / 5)
    const message = formatEmployeesList(employees)

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–≤—ã–º —Å–ø–∏—Å–∫–æ–º
    await ctx.editMessageText(message, employeeListKeyboard(page, totalPages))
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:', error)
  }
})

// –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
function formatEmployeesList(employees: Employee[]): string {
  let message = 'üìã –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:\n\n'

  employees.forEach((employee) => {
    const startDateObj = parse(employee.startDate, 'dd.MM.yyyy', new Date())
    const adaptationEndDate = addDays(startDateObj, employee.adaptationDays)
    const probationEndDate = addDays(startDateObj, employee.probationDays)

    message += `üë§ ${employee.fullName} (ID: ${employee.id})\n`
    message += `üìÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: ${employee.startDate}\n`
    message += `‚è≥ –î–Ω–∏ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏: ${employee.adaptationDays} (–¥–æ ${format(adaptationEndDate, 'dd.MM.yyyy', { locale: ru })})\n`
    message += `üéØ –ò—Å–ø—ã—Ç–∞—Ç–µ–ª—å–Ω—ã–π —Å—Ä–æ–∫: ${employee.probationDays} (–¥–æ ${format(probationEndDate, 'dd.MM.yyyy', {
      locale: ru,
    })})\n\n`
  })

  return message
}
