import { Scenes } from 'telegraf'
import { message } from 'telegraf/filters'
import { isValidDate, isValidNumber } from '../utils/validators'
import { confirmKeyboard } from '../keyboards/main'
import { WizardContext } from '../types/context'

export const addEmployeeScene = new Scenes.WizardScene<WizardContext>(
  'addEmployee',
  // –®–∞–≥ 1: –ó–∞–ø—Ä–æ—Å –§–ò–û
  async (ctx) => {
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:')
    ctx.session.employeeData = {}
    return ctx.wizard.next()
  },
  // –®–∞–≥ 2: –ó–∞–ø—Ä–æ—Å –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã
  async (ctx) => {
    if (!ctx.message || !('text' in ctx.message)) return

    ctx.session.employeeData.fullName = ctx.message.text
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã (—Ñ–æ—Ä–º–∞—Ç: DD.MM.YYYY):')
    return ctx.wizard.next()
  },
  // –®–∞–≥ 3: –ó–∞–ø—Ä–æ—Å –¥–Ω–µ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
  async (ctx) => {
    if (!ctx.message || !('text' in ctx.message)) return

    const date = ctx.message.text
    if (!isValidDate(date)) {
      await ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ (DD.MM.YYYY):')
      return
    }

    ctx.session.employeeData.startDate = date
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ (—á–∏—Å–ª–æ):')
    return ctx.wizard.next()
  },
  // –®–∞–≥ 4: –ó–∞–ø—Ä–æ—Å –¥–Ω–µ–π –∏—Å–ø—ã—Ç–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Å—Ä–æ–∫–∞
  async (ctx) => {
    if (!ctx.message || !('text' in ctx.message)) return

    const days = ctx.message.text
    if (!isValidNumber(days)) {
      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:')
      return
    }

    ctx.session.employeeData.adaptationDays = parseInt(days)
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –∏—Å–ø—ã—Ç–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Å—Ä–æ–∫–∞ (—á–∏—Å–ª–æ):')
    return ctx.wizard.next()
  },
  // –®–∞–≥ 5: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
  async (ctx) => {
    if (!ctx.message || !('text' in ctx.message)) return

    const days = ctx.message.text
    if (!isValidNumber(days)) {
      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:')
      return
    }

    ctx.session.employeeData.probationDays = parseInt(days)
    const data = ctx.session.employeeData

    const message = `
–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:
üë§ –§–ò–û: ${data.fullName}
üìÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: ${data.startDate}
‚è≥ –î–Ω–µ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–∏: ${data.adaptationDays}
üéØ –î–Ω–µ–π –∏—Å–ø—ã—Ç–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Å—Ä–æ–∫–∞: ${data.probationDays}
`
    await ctx.reply(message, confirmKeyboard)
    return ctx.wizard.next()
  },
  // –®–∞–≥ 6: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
  async (ctx) => {
    if (!('callback_query' in ctx.update)) return

    const action = (ctx.update.callback_query as any).data || ''
    if (action === 'confirm' && ctx.session.employeeData) {
      const data = {
        ...ctx.session.employeeData,
        userId: ctx.from?.id.toString() || '',
      }

      try {
        await ctx.employeeService.createEmployee(data)
        await ctx.reply('‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!')
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:', error)
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
      }
    } else {
      await ctx.reply('‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ')
    }

    return await ctx.scene.leave()
  },
)
