import { Scenes, Telegraf, session } from 'telegraf'
import * as dotenv from 'dotenv'
import { format } from 'date-fns'
import { ru } from 'date-fns/locale'
import { DataSource } from 'typeorm'
import * as cron from 'node-cron'
import { EmployeeService } from './services/employee.service'
import { NotificationService } from './services/notification.service'
import { addEmployeeScene } from './scenes/addEmployee'
import { mainKeyboard } from './keyboards/main'
import { showEmployeesScene } from './scenes/showEmployees'
import { BotContext, WizardContext } from './types/context'
import { Employee } from './entities/Employee.entity'

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config()

if (!process.env.BOT_TOKEN) {
  throw new Error('BOT_TOKEN –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è')
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å —Ç–∏–ø–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
const bot = new Telegraf<WizardContext>(process.env.BOT_TOKEN)

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const AppDataSource = new DataSource({
  type: 'sqlite',
  database: 'employees.sqlite',
  entities: [Employee],
  synchronize: true,
  logging: false,
})

const init = async () => {
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await AppDataSource.initialize()
    console.log('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞')

    const employeeService = new EmployeeService(AppDataSource)
    const notificationService = new NotificationService(bot, employeeService)

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ WizardContext
    const stage = new Scenes.Stage<WizardContext>([addEmployeeScene, showEmployeesScene])

    bot.use(
      session({
        defaultSession: () => ({
          __scenes: {},
          employeeData: {},
        }),
      }),
    )
    bot.use((ctx, next) => {
      ctx.employeeService = employeeService
      return next()
    })
    bot.use(stage.middleware())

    // –ö–æ–º–∞–Ω–¥—ã
    bot.command('start', async (ctx) => {
      await ctx.reply('üå∏ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', mainKeyboard)
    })

    bot.command('add_employee', (ctx) => ctx.scene.enter('addEmployee'))
    bot.command('show_employees', (ctx) => ctx.scene.enter('showEmployees'))

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    bot.hears('üë§ –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞', (ctx) => ctx.scene.enter('addEmployee'))
    bot.hears('üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤', (ctx) => ctx.scene.enter('showEmployees'))

    // –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    cron.schedule(
      '* 9 * * *', // –í 15:28 –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
      async () => {
        console.log('–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', new Date().toLocaleString('ru-RU'))
        await notificationService.checkAndSendNotifications()
      },
      {
        timezone: 'Europe/Moscow',
      },
    )

    // –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await bot.launch()
    console.log('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω')
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error)
    process.exit(1)
  }
}

init()

// Graceful shutdown
process.once('SIGINT', () => bot.stop('SIGINT'))
process.once('SIGTERM', () => bot.stop('SIGTERM'))
